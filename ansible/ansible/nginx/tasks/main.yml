---
# Playbook that installs and configures nginx

- name: Install nginx
  apt:
    name: [
        'nginx',
        'nginx-extras',
        ]
    state: present

- name: Configure nginx
  copy:
    src: nginx.conf
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: 0644
  notify :
    - nginx restart

- name: Add nginx.service override directory
  file:
    path: /etc/systemd/system/nginx.service.d/
    state: directory
    mode: 0755

- name: Copy NOLIMIT override file
  copy:
    src: override.conf
    dest: /etc/systemd/system/nginx.service.d/override.conf
    owner: root
    group: root
    mode: 0644
  notify :
    - nginx restart

# Must occur before picoCTF configuration is added to ensure the
# referenced keys exist.
- name: Request certificate (certbot)
  vars:
    certbot_domain : "{{ nginx_server_name }}"
    certbot_email  : "{{ admin_email }}"
  include_role:
    name: certbot
    tasks_from: request_certificates
  when: enable_certbot | bool

- name: "Add site configuration to nginx ({{ site_config_name }})"
  template: 
    src: "{{ site_config_name }}.nginx.j2"
    dest: "/etc/nginx/sites-available/{{ site_config_name }}"
    backup: yes
    owner: root
    group: root
    mode: 0644
  #no_log: True
  notify :
    - nginx reload

# HTTP Basic Auth used to secure remote testing competition sites
- name: Setup HTTP basic auth
  htpasswd:
    path: "/etc/nginx/.htpasswd"
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    owner: www-data
    group: www-data
    mode: 0640
  no_log: True
  with_items: "{{ htpasswd_accounts }}"
  when: enable_basic_auth

# Install SSL cert and key for nginx
- name: Copy SSL cert
  copy:
    src: "{{ ssl_crt }}"
    dest: "/etc/ssl/certs/{{ ssl_crt }}"
    owner: root
    group: root
    mode: 0644
  when: enable_ssl | bool

- name: Copy SSL key
  copy:
    src: "{{ ssl_key_vault }}"
    dest: "/etc/ssl/private/{{ ssl_key }}"
    owner: root
    group: root
    mode: 0644
  when: enable_ssl | bool

- name: "Enable site configuration ({{ site_config_name }})"
  file:
    src: "/etc/nginx/sites-available/{{ site_config_name }}"
    dest: "/etc/nginx/sites-enabled/{{ site_config_name }}"
    owner: root
    group: root
    state: link
  notify :
    - nginx restart

- name: Disable default nginx site configuration
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent

# create the static folder directory if it does not already exist
- name: Create static web folder directory if it does not exist
  file:
    path: /usr/share/nginx/html/static
    state: directory
    mode: 0751
    owner: root
    group: root

- name: Ensure nginx is running
  service:
    name: nginx
    state: started
    enabled: yes
