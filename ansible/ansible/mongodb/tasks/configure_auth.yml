---
# Playbook that sets up users for a running instance of MongoDB
# Heavily influenced by: https://github.com/UnderGreen/ansible-role-mongodb
# Using a subset of @UnderGreen's work

# Restart to ensure Client Access Control configuration is enabled
- name: mongodb restart
  service:
    name: "{{ mongodb_daemon_name }}"
    state: restarted

- name: Curl https://bootstrap.pypa.io/pip/2.7/get-pip.py
  command: curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
  args:
    chdir: /tmp/

- name: Install pip for python2
  command: python2 get-pip.py
  args:
    chdir: /tmp/


- name: Install dependencies for ansible pip module
  package:
    name:
      - python-setuptools
#      - python-pip #need to replace for python2
      - virtualenv #replaced python-virtualenv
      - python3-pip
      - python3-venv #replaced python3-virtualenv
      - python3-setuptools
    state: present



# pymongo is required by the following tasks to create users
- name: Install pymongo > 3.7.2 (needed for updated mongo user creation)
  pip:
    name: pymongo
    version: 3.12.3

# pymongo for python 3
- name: Install pymongo on python3
  command: python3 -m pip install pymongo


# uses Client Access Control Localhost Exception for first user
# as described: https://docs.mongodb.org/manual/tutorial/enable-authentication/
# ignore errors so subsequent runs don't fail due to the lack of
# a login_user and login_password
- name: Create intital administrative user
  mongodb_user:
    database: admin
    name: "{{ initial_admin_name }}"
    password: "{{ initial_admin_password }}"
    roles: "root"
    login_port: "{{ mongodb_conf_port }}"
  ignore_errors: True

- name: Create normal users
  mongodb_user:
    database: "{{ item.database }}"
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    roles: "{{ item.roles }}"
    login_port: "{{ mongodb_conf_port }}"
    login_user: "{{ initial_admin_name }}"
    login_password: "{{ initial_admin_password }}"
  with_items:
    - "{{ mongodb_users }}"
